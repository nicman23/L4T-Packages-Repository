# AArch64 multi-platform
# Maintainer: Kevin Mihelich <kevin@archlinuxarm.org>

buildarch=8

pkgbase=linux-tegra
_kernelname=${pkgbase#linux}
_desc="AArch64 multi-platform"
pkgver=4.9.140
pkgrel=1
arch=('aarch64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'uboot-tools' 'dtc' 'gcc7')

options=('!strip')
source=('linux-nvgpu-r32.2.2.tar.gz::https://gitlab.incom.co/CM-Shield/android_kernel_nvidia_linux-4.9_kernel_nvgpu/-/archive/lineage-16.0/android_kernel_nvidia_linux-4.9_kernel_nvgpu-lineage-16.0.tar.gz'
        'soc-tegra-rel32.2.2.tar.gz::https://gitlab.incom.co/CM-Shield/android_kernel_nvidia_linux-4.9_hardware_nvidia_soc_tegra/-/archive/lineage-16.0/android_kernel_nvidia_linux-4.9_hardware_nvidia_soc_tegra-lineage-16.0.tar.gz'
        'soc-tegra-t210-rel32.2.2.tar.gz::https://gitlab.incom.co/CM-Shield/android_kernel_nvidia_linux-4.9_hardware_nvidia_soc_t210/-/archive/lineage-16.0/android_kernel_nvidia_linux-4.9_hardware_nvidia_soc_t210-lineage-16.0.tar.gz'
        'platform-tegra-common-rel32.2.2.tar.gz::https://gitlab.incom.co/CM-Shield/android_kernel_nvidia_linux-4.9_hardware_nvidia_platform_tegra_common/-/archive/lineage-16.0/android_kernel_nvidia_linux-4.9_hardware_nvidia_platform_tegra_common-lineage-16.0.tar.gz'
        'platform-tegra-t210-common-rel32.2.2.tar.gz::https://gitlab.incom.co/CM-Shield/android_kernel_nvidia_linux-4.9_hardware_nvidia_platform_t210_common/-/archive/lineage-16.0/android_kernel_nvidia_linux-4.9_hardware_nvidia_platform_t210_common-lineage-16.0.tar.gz'
#        'git+https://gitlab.com/switchroot/l4t-kernel-4.9.git#branch=linux-rel32'
        'git+https://gitlab.com/switchroot/l4t-kernel-nvidia.git#branch=linux-rel32'
        'git+https://gitlab.com/switchroot/l4t-platform-t210-switch.git#branch=linux-rel32'
        'https://developer.nvidia.com/embedded/dlc/r32-3-1_Release_v1.0/t210ref_release_aarch64/Tegra210_Linux_R32.3.1_aarch64.tbz2'
	'build_uboot_initramfs'
	'linux.preset'
        '60-linux.hook'
        '90-linux.hook')

md5sums=("SKIP"
         "SKIP"
         "SKIP"
         "SKIP"
         "SKIP"
	 "SKIP"
 	 "SKIP"
	 "SKIP"
         'ce6c81ad1ad1f8b333fd6077d47abdaf'
         "SKIP")

prepare() {
  cd $srcdir
  # put firmware in the right place..
  tar xf Linux_for_Tegra/nv_tegra/nvidia_drivers.tbz2 lib/firmware/
  mv lib/firmware/* .
  cp bcm4354.hcd brcm/BCM4354.hcd
  cp bcm4354.hcd brcm/BCM4356A3.hcd

  # Shallow clone in prepare as shallow clones for vcs sources will never be implemented.
  # https://bugs.archlinux.org/task/52957

  git clone --depth=1 https://gitlab.com/switchroot/l4t-kernel-4.9.git -b linux-rel32

  KERNEL_DIR=$(pwd)"/kernel_r32/kernel-4.9"
  CURPWD=$(pwd)

  #Handle Standard Kernel Bits
  echo "Extracting and Patching L4T-Switch 4.9"
  mkdir -p kernel_r32
  mv ./l4t-kernel-4.9 $KERNEL_DIR
  cd $KERNEL_DIR
  #put patch files for kernel repo after this line
  cd $CURPWD
  echo "Done"

  #Handle Nvidia Kernel bits
  echo "Extracting Nvidia Kernel Stuff"
  mkdir -p ./kernel_r32/nvidia
  mv ./l4t-kernel-nvidia*/* ./kernel_r32/nvidia
  rm -r ./l4t-kernel-nvidia*
  echo "Done"

  #Handle Switchroot DTS files
  echo "Extracting DTS stuff"
  mkdir -p ./kernel_r32/hardware/nvidia/platform/t210/icosa
  cd l4t-platform-t210-switch
  cd $CURPWD
  mv ./l4t-platform-t210-switch*/* ./kernel_r32/hardware/nvidia/platform/t210/icosa/
  rm -r ./l4t-platform-t210-switch*
  echo "Done"

  #Extract and place nvidia bits
  echo "Extracting Nvidia GPU Kernel Bits"
  mkdir -p ./kernel_r32/nvgpu
  mkdir linux-nvgpu
  tar -xf "./linux-nvgpu-r32.2.2.tar.gz" -C linux-nvgpu --strip 1
  rm "./linux-nvgpu-r32.2.2.tar.gz"
  mv ./linux-nvgpu/* ./kernel_r32/nvgpu
  rm -r linux-nvgpu
  echo "Done"

  echo "Extracting Tegra SOC Data"
  mkdir -p ./kernel_r32/hardware/nvidia/soc/tegra/
  mkdir soc-tegra
  tar -xf "./soc-tegra-rel32.2.2.tar.gz" -C soc-tegra --strip 1
  rm "./soc-tegra-rel32.2.2.tar.gz"
  mv ./soc-tegra/* ./kernel_r32/hardware/nvidia/soc/tegra/
  rm -r soc-tegra
  echo "Done"

  echo "Extracting T210 SOC Data"
  mkdir -p ./kernel_r32/hardware/nvidia/soc/t210/
  mkdir soc-tegra-t210
  tar -xf "soc-tegra-t210-rel32.2.2.tar.gz" -C soc-tegra-t210 --strip 1
  rm "soc-tegra-t210-rel32.2.2.tar.gz"
  mv ./soc-tegra-t210/* ./kernel_r32/hardware/nvidia/soc/t210/
  rm -r soc-tegra-t210
  echo "Done"

  echo "Extracting Tegra Common Platform Data"
  mkdir -p ./kernel_r32/hardware/nvidia/platform/tegra/common/
  mkdir platform-tegra-common
  tar -xf "platform-tegra-common-rel32.2.2.tar.gz" -C platform-tegra-common --strip 1
  rm "platform-tegra-common-rel32.2.2.tar.gz"
  mv ./platform-tegra-common/* ./kernel_r32/hardware/nvidia/platform/tegra/common/
  rm -r platform-tegra-common
  echo "Done"

  echo "Extracting T210 Common Platform Data"
  mkdir -p ./kernel_r32/hardware/nvidia/platform/t210/common/
  mkdir common-t210
  tar -xf "platform-tegra-t210-common-rel32.2.2.tar.gz" -C common-t210 --strip 1
  rm "platform-tegra-t210-common-rel32.2.2.tar.gz"
  mv ./common-t210/* ./kernel_r32/hardware/nvidia/platform/t210/common/
  rm -r common-t210
  echo "Done"

  echo "Preparing Source and Creating Defconfig"
  cd $KERNEL_DIR
  cp arch/arm64/configs/tegra_linux_defconfig .config

  #Patch Defconfig
  sed "s^CONFIG_EXTRA_FIRMWARE_DIR=\"/lib/firmware\"^CONFIG_EXTRA_FIRMWARE_DIR=\"$srcdir\"^" -i .config

  # add pkgrel to extraversion
  sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh
}

build() {
  cd $srcdir/kernel_r32/kernel-4.9

  # Clear CFLAGS from outside.
  export CC=aarch64-unknown-linux-gnu-gcc-7
  export CXX=aarch64-unknown-linux-gnu-g++-7
  export CPP="aarch64-unknown-linux-gnu-gcc-7 -E"
  # You're building this on aarch64. Come on.
  export LD=ld

  #Prepare Linux sources
  make olddefconfig
  make prepare
  make modules_prepare

  unset CFLAGS
  unset CPPFLAGS
  unset CXXFLAGS
  unset LDFLAGS	
  make CC=${CC} CXX=${CXX} LD=${LD} CPP="${CPP}" ${MAKEFLAGS} tegra-dtstree="../hardware/nvidia" Image Image.gz modules

  # Generate device tree blobs with symbols to support applying device tree overlays in U-Boot
  make tegra-dtstree="../hardware/nvidia" ${MAKEFLAGS} DTC_FLAGS="-@" dtbs
}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7' 'uboot-tools')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=('kernel26' "linux=${pkgver}")
  replaces=('linux-armv8')
  conflicts=('linux')
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=${pkgname}.install

  cd $srcdir/kernel_r32/kernel-4.9

  KARCH=arm64

  # get kernel version
  _kernver="$(make kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{boot/switchroot/arch,usr/lib/modules}
  make INSTALL_MOD_PATH="${pkgdir}/usr" modules_install
  
  # L4T just doesn't have dtbs_install. Okay. Fine, Nvidia.
  cp arch/$KARCH/boot/dts/tegra210-icosa.dtb "${pkgdir}/boot/switchroot/arch/"
  cp arch/$KARCH/boot/Image{,.gz} "${pkgdir}/boot/switchroot/arch/"

  # make room for external modules
  local _extramodules="extramodules-${_basekernel}${_kernelname}"
  ln -s "../${_extramodules}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"

  # add real version for building modules and running depmod from hook
  echo "${_kernver}" |
    install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

  # remove build and source links
  rm "${pkgdir}"/usr/lib/modules/${_kernver}/{source,build}

  # now we call depmod...
  depmod -b "${pkgdir}/usr" -F System.map "${_kernver}"

  # add vmlinux
  install -Dt "${pkgdir}/usr/lib/modules/${_kernver}/build" -m644 vmlinux

  cd $srcdir
  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${_kernver}|g
    s|%EXTRAMODULES%|${_extramodules}|g
  "

  # install mkinitcpio preset file
  sed "${_subst}" linux.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install pacman hooks
  sed "${_subst}" 60-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
  sed "${_subst}" 90-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"

  install -Dm755 $srcdir/build_uboot_initramfs ${pkgdir}/usr/bin/build_uboot_initramfs

  # i don't know why this appears, but it does?
  # get rid of usr/lib/firmware/ttusb-budget/dspbootcode.bin
  rm $pkgdir/usr/lib/firmware/ -r
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers')

  cd $srcdir/kernel_r32/kernel-4.9
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
  install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

  mkdir "${_builddir}/.tmp_versions"

  cp -t "${_builddir}" -a include scripts

  install -Dt "${_builddir}/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
  install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s arch/$KARCH/kernel/module.lds

  cp -t "${_builddir}/arch/${KARCH}" -a arch/${KARCH}/include
  mkdir -p "${_builddir}/arch/arm"
  cp -t "${_builddir}/arch/arm" -a arch/arm/include

  install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
  install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # add xfs and shmem for aufs building
  mkdir -p "${_builddir}"/{fs/xfs,mm}

  # copy in Kconfig files
  find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

  # remove unneeded architectures
  local _arch
  for _arch in "${_builddir}"/arch/*/; do
    [[ ${_arch} == */${KARCH}/ || ${_arch} == */arm/ ]] && continue
    rm -r "${_arch}"
  done

  # remove files already in linux-docs package
  rm -r "${_builddir}/Documentation"

  # remove now broken symlinks
  find -L "${_builddir}" -type l -printf 'Removing %P\n' -delete

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"

  # strip scripts directory
  local _binary _strip
  while read -rd '' _binary; do
    case "$(file -bi "${_binary}")" in
      *application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      *application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      *application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
      *) continue ;;
    esac
    /usr/bin/strip ${_strip} "${_binary}"
  done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
